// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: astar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_astar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_astar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_astar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_astar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_astar_2eproto;
namespace astar {
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace astar
PROTOBUF_NAMESPACE_OPEN
template<> ::astar::Reply* Arena::CreateMaybeMessage<::astar::Reply>(Arena*);
template<> ::astar::Request* Arena::CreateMaybeMessage<::astar::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace astar {

enum Reply_ASR_RETVAL : int {
  Reply_ASR_RETVAL_ASR_OK = 0,
  Reply_ASR_RETVAL_ASR_FAILED = 1,
  Reply_ASR_RETVAL_ASR_NEAREST = 2,
  Reply_ASR_RETVAL_Reply_ASR_RETVAL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Reply_ASR_RETVAL_Reply_ASR_RETVAL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Reply_ASR_RETVAL_IsValid(int value);
constexpr Reply_ASR_RETVAL Reply_ASR_RETVAL_ASR_RETVAL_MIN = Reply_ASR_RETVAL_ASR_OK;
constexpr Reply_ASR_RETVAL Reply_ASR_RETVAL_ASR_RETVAL_MAX = Reply_ASR_RETVAL_ASR_NEAREST;
constexpr int Reply_ASR_RETVAL_ASR_RETVAL_ARRAYSIZE = Reply_ASR_RETVAL_ASR_RETVAL_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_ASR_RETVAL_descriptor();
template<typename T>
inline const std::string& Reply_ASR_RETVAL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reply_ASR_RETVAL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reply_ASR_RETVAL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reply_ASR_RETVAL_descriptor(), enum_t_value);
}
inline bool Reply_ASR_RETVAL_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Reply_ASR_RETVAL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reply_ASR_RETVAL>(
    Reply_ASR_RETVAL_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:astar.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "astar.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_astar_2eproto);
    return ::descriptor_table_astar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsJobFieldNumber = 1,
    kPsMoveFieldNumber = 2,
  };
  // .google.protobuf.Any psJob = 1;
  bool has_psjob() const;
  private:
  bool _internal_has_psjob() const;
  public:
  void clear_psjob();
  const PROTOBUF_NAMESPACE_ID::Any& psjob() const;
  PROTOBUF_NAMESPACE_ID::Any* release_psjob();
  PROTOBUF_NAMESPACE_ID::Any* mutable_psjob();
  void set_allocated_psjob(PROTOBUF_NAMESPACE_ID::Any* psjob);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_psjob() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_psjob();
  public:
  void unsafe_arena_set_allocated_psjob(
      PROTOBUF_NAMESPACE_ID::Any* psjob);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_psjob();

  // .google.protobuf.Any psMove = 2;
  bool has_psmove() const;
  private:
  bool _internal_has_psmove() const;
  public:
  void clear_psmove();
  const PROTOBUF_NAMESPACE_ID::Any& psmove() const;
  PROTOBUF_NAMESPACE_ID::Any* release_psmove();
  PROTOBUF_NAMESPACE_ID::Any* mutable_psmove();
  void set_allocated_psmove(PROTOBUF_NAMESPACE_ID::Any* psmove);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_psmove() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_psmove();
  public:
  void unsafe_arena_set_allocated_psmove(
      PROTOBUF_NAMESPACE_ID::Any* psmove);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_psmove();

  // @@protoc_insertion_point(class_scope:astar.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* psjob_;
  PROTOBUF_NAMESPACE_ID::Any* psmove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_astar_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:astar.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "astar.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_astar_2eproto);
    return ::descriptor_table_astar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_ASR_RETVAL ASR_RETVAL;
  static constexpr ASR_RETVAL ASR_OK =
    Reply_ASR_RETVAL_ASR_OK;
  static constexpr ASR_RETVAL ASR_FAILED =
    Reply_ASR_RETVAL_ASR_FAILED;
  static constexpr ASR_RETVAL ASR_NEAREST =
    Reply_ASR_RETVAL_ASR_NEAREST;
  static inline bool ASR_RETVAL_IsValid(int value) {
    return Reply_ASR_RETVAL_IsValid(value);
  }
  static constexpr ASR_RETVAL ASR_RETVAL_MIN =
    Reply_ASR_RETVAL_ASR_RETVAL_MIN;
  static constexpr ASR_RETVAL ASR_RETVAL_MAX =
    Reply_ASR_RETVAL_ASR_RETVAL_MAX;
  static constexpr int ASR_RETVAL_ARRAYSIZE =
    Reply_ASR_RETVAL_ASR_RETVAL_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ASR_RETVAL_descriptor() {
    return Reply_ASR_RETVAL_descriptor();
  }
  template<typename T>
  static inline const std::string& ASR_RETVAL_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ASR_RETVAL>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ASR_RETVAL_Name.");
    return Reply_ASR_RETVAL_Name(enum_t_value);
  }
  static inline bool ASR_RETVAL_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ASR_RETVAL* value) {
    return Reply_ASR_RETVAL_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRetValFieldNumber = 1,
  };
  // .astar.Reply.ASR_RETVAL retVal = 1;
  void clear_retval();
  ::astar::Reply_ASR_RETVAL retval() const;
  void set_retval(::astar::Reply_ASR_RETVAL value);
  private:
  ::astar::Reply_ASR_RETVAL _internal_retval() const;
  void _internal_set_retval(::astar::Reply_ASR_RETVAL value);
  public:

  // @@protoc_insertion_point(class_scope:astar.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int retval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_astar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .google.protobuf.Any psJob = 1;
inline bool Request::_internal_has_psjob() const {
  return this != internal_default_instance() && psjob_ != nullptr;
}
inline bool Request::has_psjob() const {
  return _internal_has_psjob();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Request::_internal_psjob() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = psjob_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Request::psjob() const {
  // @@protoc_insertion_point(field_get:astar.Request.psJob)
  return _internal_psjob();
}
inline void Request::unsafe_arena_set_allocated_psjob(
    PROTOBUF_NAMESPACE_ID::Any* psjob) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psjob_);
  }
  psjob_ = psjob;
  if (psjob) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astar.Request.psJob)
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::release_psjob() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = psjob_;
  psjob_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::unsafe_arena_release_psjob() {
  // @@protoc_insertion_point(field_release:astar.Request.psJob)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = psjob_;
  psjob_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::_internal_mutable_psjob() {
  
  if (psjob_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    psjob_ = p;
  }
  return psjob_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::mutable_psjob() {
  // @@protoc_insertion_point(field_mutable:astar.Request.psJob)
  return _internal_mutable_psjob();
}
inline void Request::set_allocated_psjob(PROTOBUF_NAMESPACE_ID::Any* psjob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psjob_);
  }
  if (psjob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psjob)->GetArena();
    if (message_arena != submessage_arena) {
      psjob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psjob, submessage_arena);
    }
    
  } else {
    
  }
  psjob_ = psjob;
  // @@protoc_insertion_point(field_set_allocated:astar.Request.psJob)
}

// .google.protobuf.Any psMove = 2;
inline bool Request::_internal_has_psmove() const {
  return this != internal_default_instance() && psmove_ != nullptr;
}
inline bool Request::has_psmove() const {
  return _internal_has_psmove();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Request::_internal_psmove() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = psmove_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Request::psmove() const {
  // @@protoc_insertion_point(field_get:astar.Request.psMove)
  return _internal_psmove();
}
inline void Request::unsafe_arena_set_allocated_psmove(
    PROTOBUF_NAMESPACE_ID::Any* psmove) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psmove_);
  }
  psmove_ = psmove;
  if (psmove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astar.Request.psMove)
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::release_psmove() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = psmove_;
  psmove_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::unsafe_arena_release_psmove() {
  // @@protoc_insertion_point(field_release:astar.Request.psMove)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = psmove_;
  psmove_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::_internal_mutable_psmove() {
  
  if (psmove_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    psmove_ = p;
  }
  return psmove_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Request::mutable_psmove() {
  // @@protoc_insertion_point(field_mutable:astar.Request.psMove)
  return _internal_mutable_psmove();
}
inline void Request::set_allocated_psmove(PROTOBUF_NAMESPACE_ID::Any* psmove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psmove_);
  }
  if (psmove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psmove)->GetArena();
    if (message_arena != submessage_arena) {
      psmove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psmove, submessage_arena);
    }
    
  } else {
    
  }
  psmove_ = psmove;
  // @@protoc_insertion_point(field_set_allocated:astar.Request.psMove)
}

// -------------------------------------------------------------------

// Reply

// .astar.Reply.ASR_RETVAL retVal = 1;
inline void Reply::clear_retval() {
  retval_ = 0;
}
inline ::astar::Reply_ASR_RETVAL Reply::_internal_retval() const {
  return static_cast< ::astar::Reply_ASR_RETVAL >(retval_);
}
inline ::astar::Reply_ASR_RETVAL Reply::retval() const {
  // @@protoc_insertion_point(field_get:astar.Reply.retVal)
  return _internal_retval();
}
inline void Reply::_internal_set_retval(::astar::Reply_ASR_RETVAL value) {
  
  retval_ = value;
}
inline void Reply::set_retval(::astar::Reply_ASR_RETVAL value) {
  _internal_set_retval(value);
  // @@protoc_insertion_point(field_set:astar.Reply.retVal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace astar

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::astar::Reply_ASR_RETVAL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::astar::Reply_ASR_RETVAL>() {
  return ::astar::Reply_ASR_RETVAL_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_astar_2eproto
